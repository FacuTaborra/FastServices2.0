"""modelos de match

Revision ID: 8c6d3026290c
Revises: 
Create Date: 2025-10-10 10:41:59.342302

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '8c6d3026290c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Aplicar los cambios de la migración."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_models',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('version', sa.String(length=40), nullable=False),
    sa.Column('provider', sa.String(length=60), nullable=True),
    sa.Column('params', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'version', name='uq_ai_models_name_version')
    )
    op.create_table('currencies',
    sa.Column('code', sa.String(length=3), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.PrimaryKeyConstraint('code')
    )
    op.create_table('license_types',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('code', sa.String(length=64), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('users',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('role', sa.Enum('CLIENT', 'PROVIDER', 'ADMIN', name='user_role'), nullable=False),
    sa.Column('first_name', sa.String(length=60), nullable=False),
    sa.Column('last_name', sa.String(length=60), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('phone', sa.String(length=30), nullable=False),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('password_hash', sa.String(length=60), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('profile_image_s3_key', sa.String(length=255), nullable=True, comment='Clave S3 de la imagen de perfil'),
    sa.Column('profile_image_url', sa.String(length=500), nullable=True, comment='URL pública de la imagen de perfil'),
    sa.Column('profile_image_uploaded_at', sa.DateTime(), nullable=True, comment='Fecha de subida de la imagen'),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('phone')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('addresses',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.Column('street', sa.String(length=200), nullable=False),
    sa.Column('city', sa.String(length=100), nullable=False),
    sa.Column('state', sa.String(length=100), nullable=False),
    sa.Column('postal_code', sa.String(length=20), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=False),
    sa.Column('additional_info', sa.Text(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('latitude', sa.Numeric(precision=9, scale=6), nullable=True),
    sa.Column('longitude', sa.Numeric(precision=9, scale=6), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('provider_profiles',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('rating_avg', sa.DECIMAL(precision=3, scale=2), nullable=False),
    sa.Column('total_reviews', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_provider_profiles_id'), 'provider_profiles', ['id'], unique=False)
    op.create_table('provider_licenses',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('provider_profile_id', sa.BigInteger(), nullable=False),
    sa.Column('license_type_id', sa.Integer(), nullable=False),
    sa.Column('license_number', sa.String(length=120), nullable=False),
    sa.Column('issued_by', sa.String(length=120), nullable=True),
    sa.Column('issued_at', sa.Date(), nullable=True),
    sa.Column('expires_at', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['license_type_id'], ['license_types.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['provider_profile_id'], ['provider_profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('provider_profile_id', 'license_type_id', 'license_number', name='uq_provider_license_unique')
    )
    op.create_index(op.f('ix_provider_licenses_id'), 'provider_licenses', ['id'], unique=False)
    op.create_table('provider_service_areas',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('provider_profile_id', sa.BigInteger(), nullable=False),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('state', sa.String(length=100), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=False),
    sa.Column('center_lat', sa.Numeric(precision=9, scale=6), nullable=True),
    sa.Column('center_lon', sa.Numeric(precision=9, scale=6), nullable=True),
    sa.Column('radius_km', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['provider_profile_id'], ['provider_profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_provider_service_areas_city', 'provider_service_areas', ['city'], unique=False)
    op.create_index('ix_provider_service_areas_point', 'provider_service_areas', ['center_lat', 'center_lon'], unique=False)
    op.create_table('service_requests',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.BigInteger(), nullable=False),
    sa.Column('address_id', sa.BigInteger(), nullable=True),
    sa.Column('city_snapshot', sa.String(length=100), nullable=True),
    sa.Column('lat_snapshot', sa.Numeric(precision=9, scale=6), nullable=True),
    sa.Column('lon_snapshot', sa.Numeric(precision=9, scale=6), nullable=True),
    sa.Column('title', sa.String(length=150), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('request_type', sa.Enum('FAST', 'LICITACION', name='service_request_type'), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'PUBLISHED', 'CLOSED', 'CANCELLED', name='service_request_status'), nullable=False),
    sa.Column('preferred_start_at', sa.DateTime(), nullable=True),
    sa.Column('preferred_end_at', sa.DateTime(), nullable=True),
    sa.Column('bidding_deadline', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.CheckConstraint("((request_type = 'LICITACION' AND bidding_deadline IS NOT NULL) OR (request_type = 'FAST' AND bidding_deadline IS NULL))", name='ck_service_requests_bidding_deadline'),
    sa.ForeignKeyConstraint(['address_id'], ['addresses.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_service_requests_city_snapshot', 'service_requests', ['city_snapshot'], unique=False)
    op.create_index('ix_service_requests_point', 'service_requests', ['lat_snapshot', 'lon_snapshot'], unique=False)
    op.create_index('ix_service_requests_type_city', 'service_requests', ['request_type', 'city_snapshot', 'created_at'], unique=False)
    op.create_table('request_inferred_licenses',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('request_id', sa.BigInteger(), nullable=False),
    sa.Column('license_type_id', sa.Integer(), nullable=False),
    sa.Column('confidence', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('model_id', sa.BigInteger(), nullable=True),
    sa.Column('predicted_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('validation_status', sa.Enum('AUTO', 'APPROVED', 'OVERRIDDEN', 'REJECTED', name='request_inferred_license_status'), nullable=False),
    sa.Column('validated_by', sa.BigInteger(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['license_type_id'], ['license_types.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['model_id'], ['ai_models.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['request_id'], ['service_requests.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['validated_by'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('request_id', 'license_type_id', name='uq_request_license_inference')
    )
    op.create_index('ix_inferred_licenses_request', 'request_inferred_licenses', ['request_id'], unique=False)
    op.create_table('service_request_images',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('request_id', sa.BigInteger(), nullable=False),
    sa.Column('s3_key', sa.String(length=255), nullable=False),
    sa.Column('public_url', sa.String(length=500), nullable=True),
    sa.Column('caption', sa.String(length=150), nullable=True),
    sa.Column('sort_order', sa.SmallInteger(), nullable=False),
    sa.Column('uploaded_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['request_id'], ['service_requests.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('service_request_matches',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('request_id', sa.BigInteger(), nullable=False),
    sa.Column('provider_profile_id', sa.BigInteger(), nullable=False),
    sa.Column('license_type_id', sa.Integer(), nullable=True),
    sa.Column('score', sa.Numeric(precision=7, scale=4), nullable=False),
    sa.Column('distance_km', sa.Numeric(precision=6, scale=2), nullable=True),
    sa.Column('features', sa.JSON(), nullable=True),
    sa.Column('model_id', sa.BigInteger(), nullable=True),
    sa.Column('match_reason', sa.String(length=200), nullable=True),
    sa.Column('status', sa.Enum('NOTIFIED', 'DECLINED', 'PROPOSAL_SENT', 'BLOCKED', name='service_request_match_status'), nullable=False),
    sa.Column('notified_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('responded_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['license_type_id'], ['license_types.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['model_id'], ['ai_models.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['provider_profile_id'], ['provider_profiles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['request_id'], ['service_requests.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('request_id', 'provider_profile_id', name='uq_request_provider_match')
    )
    op.create_index('ix_matches_provider_status', 'service_request_matches', ['provider_profile_id', 'status'], unique=False)
    op.create_index('ix_matches_request_score', 'service_request_matches', ['request_id', 'score'], unique=False)
    op.create_table('service_request_proposals',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('request_id', sa.BigInteger(), nullable=False),
    sa.Column('provider_profile_id', sa.BigInteger(), nullable=False),
    sa.Column('version', sa.SmallInteger(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'ACCEPTED', 'REJECTED', 'WITHDRAWN', 'EXPIRED', name='service_request_proposal_status'), nullable=False),
    sa.Column('quoted_price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('proposed_start_at', sa.DateTime(), nullable=True),
    sa.Column('proposed_end_at', sa.DateTime(), nullable=True),
    sa.Column('valid_until', sa.DateTime(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['currency'], ['currencies.code'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['provider_profile_id'], ['provider_profiles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['request_id'], ['service_requests.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('request_id', 'provider_profile_id', 'version', name='uq_request_provider_proposal')
    )
    op.create_index('ix_proposals_provider_status', 'service_request_proposals', ['provider_profile_id', 'status'], unique=False)
    op.create_index('ix_proposals_req_status', 'service_request_proposals', ['request_id', 'status'], unique=False)
    op.create_table('services',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('request_id', sa.BigInteger(), nullable=True),
    sa.Column('proposal_id', sa.BigInteger(), nullable=True),
    sa.Column('client_id', sa.BigInteger(), nullable=False),
    sa.Column('provider_profile_id', sa.BigInteger(), nullable=False),
    sa.Column('address_snapshot', sa.JSON(), nullable=True),
    sa.Column('scheduled_start_at', sa.DateTime(), nullable=True),
    sa.Column('scheduled_end_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELED', name='service_status'), nullable=False),
    sa.Column('total_price', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['proposal_id'], ['service_request_proposals.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['provider_profile_id'], ['provider_profiles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['request_id'], ['service_requests.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_services_client_status', 'services', ['client_id', 'status'], unique=False)
    op.create_index('ix_services_provider_status', 'services', ['provider_profile_id', 'status'], unique=False)
    op.create_index('ix_services_scheduled_start', 'services', ['scheduled_start_at'], unique=False)
    op.create_table('service_reviews',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('service_id', sa.BigInteger(), nullable=False),
    sa.Column('rater_user_id', sa.BigInteger(), nullable=False),
    sa.Column('ratee_provider_profile_id', sa.BigInteger(), nullable=False),
    sa.Column('rating', sa.SmallInteger(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint('rating BETWEEN 1 AND 5', name='ck_service_reviews_rating'),
    sa.ForeignKeyConstraint(['ratee_provider_profile_id'], ['provider_profiles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['rater_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('service_id', 'rater_user_id', name='uq_service_rater')
    )
    op.create_index('ix_service_reviews_ratee_rating', 'service_reviews', ['ratee_provider_profile_id', 'rating'], unique=False)
    op.create_table('service_status_history',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('service_id', sa.BigInteger(), nullable=False),
    sa.Column('from_status', sa.String(length=20), nullable=True),
    sa.Column('to_status', sa.String(length=20), nullable=False),
    sa.Column('changed_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('changed_by', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['changed_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_service_status_history_service', 'service_status_history', ['service_id', 'changed_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Revertir los cambios de la migración."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_service_status_history_service', table_name='service_status_history')
    op.drop_table('service_status_history')
    op.drop_index('ix_service_reviews_ratee_rating', table_name='service_reviews')
    op.drop_table('service_reviews')
    op.drop_index('ix_services_scheduled_start', table_name='services')
    op.drop_index('ix_services_provider_status', table_name='services')
    op.drop_index('ix_services_client_status', table_name='services')
    op.drop_table('services')
    op.drop_index('ix_proposals_req_status', table_name='service_request_proposals')
    op.drop_index('ix_proposals_provider_status', table_name='service_request_proposals')
    op.drop_table('service_request_proposals')
    op.drop_index('ix_matches_request_score', table_name='service_request_matches')
    op.drop_index('ix_matches_provider_status', table_name='service_request_matches')
    op.drop_table('service_request_matches')
    op.drop_table('service_request_images')
    op.drop_index('ix_inferred_licenses_request', table_name='request_inferred_licenses')
    op.drop_table('request_inferred_licenses')
    op.drop_index('ix_service_requests_type_city', table_name='service_requests')
    op.drop_index('ix_service_requests_point', table_name='service_requests')
    op.drop_index('ix_service_requests_city_snapshot', table_name='service_requests')
    op.drop_table('service_requests')
    op.drop_index('ix_provider_service_areas_point', table_name='provider_service_areas')
    op.drop_index('ix_provider_service_areas_city', table_name='provider_service_areas')
    op.drop_table('provider_service_areas')
    op.drop_index(op.f('ix_provider_licenses_id'), table_name='provider_licenses')
    op.drop_table('provider_licenses')
    op.drop_index(op.f('ix_provider_profiles_id'), table_name='provider_profiles')
    op.drop_table('provider_profiles')
    op.drop_table('addresses')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('license_types')
    op.drop_table('currencies')
    op.drop_table('ai_models')
    # ### end Alembic commands ###