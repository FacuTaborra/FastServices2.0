"""modelos de match

Revision ID: 09ee62602e52
Revises: 13db6c5c289d
Create Date: 2025-10-10 10:26:46.854005

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = "09ee62602e52"
down_revision = "13db6c5c289d"
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Aplicar los cambios de la migraciÃ³n."""
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    if bind.dialect.name == "mysql":

        def table_exists(name: str) -> bool:
            insp = sa.inspect(bind)
            return name in insp.get_table_names()

        def column_exists(table: str, column: str) -> bool:
            insp = sa.inspect(bind)
            if table not in insp.get_table_names():
                return False
            return any(col["name"] == column for col in insp.get_columns(table))

        def drop_indexes(table: str, names: set[str]) -> None:
            insp = sa.inspect(bind)
            for idx in insp.get_indexes(table):
                if idx["name"] in names:
                    op.drop_index(idx["name"], table_name=table)

        def drop_foreign_keys_referencing(table: str, target_tables: set[str]) -> None:
            insp = sa.inspect(bind)
            for fk in insp.get_foreign_keys(table):
                if fk["referred_table"] in target_tables:
                    op.drop_constraint(fk["name"], table, type_="foreignkey")

        def drop_unique_if_matches(
            table: str, name: str, column_count: int | None = None
        ) -> bool:
            insp = sa.inspect(bind)
            for uq in insp.get_unique_constraints(table):
                if uq["name"] == name:
                    if column_count is None or len(uq["column_names"]) == column_count:
                        op.drop_constraint(name, table, type_="unique")
                        return True
            return False

        # revertir cambios parciales en service_request_proposals
        if table_exists("service_request_proposals"):
            drop_foreign_keys_referencing("service_request_proposals", {"currencies"})
            drop_indexes(
                "service_request_proposals",
                {"ix_proposals_provider_status", "ix_proposals_req_status"},
            )
            if drop_unique_if_matches(
                "service_request_proposals",
                "uq_request_provider_proposal",
                column_count=3,
            ):
                # restaurar la constraint original (request_id, provider_profile_id)
                op.create_unique_constraint(
                    "uq_request_provider_proposal",
                    "service_request_proposals",
                    ["request_id", "provider_profile_id"],
                )
            if column_exists("service_request_proposals", "version"):
                op.drop_column("service_request_proposals", "version")
            if column_exists("service_request_proposals", "proposed_start_at"):
                op.drop_column("service_request_proposals", "proposed_start_at")
            if column_exists("service_request_proposals", "proposed_end_at"):
                op.drop_column("service_request_proposals", "proposed_end_at")

        # revertir cambios parciales en service_request_matches
        if table_exists("service_request_matches"):
            drop_indexes(
                "service_request_matches",
                {"ix_matches_request_score", "ix_matches_provider_status"},
            )
            drop_foreign_keys_referencing(
                "service_request_matches", {"license_types", "ai_models"}
            )
            if column_exists("service_request_matches", "created_at"):
                op.drop_column("service_request_matches", "created_at")
            for column_name in [
                "model_id",
                "features",
                "distance_km",
                "score",
                "license_type_id",
            ]:
                if column_exists("service_request_matches", column_name):
                    op.drop_column("service_request_matches", column_name)

        # revertir cambios parciales en provider_licenses
        if table_exists("provider_licenses") and column_exists(
            "provider_licenses", "license_type_id"
        ):
            drop_foreign_keys_referencing("provider_licenses", {"license_types"})
            drop_unique_if_matches("provider_licenses", "uq_provider_license_unique")
            op.drop_column("provider_licenses", "license_type_id")

        # revertir cambios parciales en service_requests
        if table_exists("service_requests"):
            drop_indexes(
                "service_requests",
                {
                    "ix_service_requests_city_snapshot",
                    "ix_service_requests_point",
                    "ix_service_requests_type_city",
                },
            )
            for column_name in ["city_snapshot", "lat_snapshot", "lon_snapshot"]:
                if column_exists("service_requests", column_name):
                    op.drop_column("service_requests", column_name)

        # revertir cambios parciales en services (restaurar columnas si ya fueron eliminadas)
        if table_exists("services"):
            for column_name, column_type in [
                ("rating", sa.SmallInteger()),
                ("review_comment", sa.Text()),
                ("rated_at", sa.DateTime()),
            ]:
                if not column_exists("services", column_name):
                    op.add_column(
                        "services", sa.Column(column_name, column_type, nullable=True)
                    )

        # eliminar tablas creadas parcialmente en orden seguro
        for table_name in (
            "request_inferred_licenses",
            "service_reviews",
            "service_status_history",
            "provider_service_areas",
            "ai_models",
            "currencies",
            "license_types",
        ):
            if table_exists(table_name):
                op.execute(sa.text(f"DROP TABLE IF EXISTS {table_name}"))
    op.create_table(
        "ai_models",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=120), nullable=False),
        sa.Column("version", sa.String(length=40), nullable=False),
        sa.Column("provider", sa.String(length=60), nullable=True),
        sa.Column("params", sa.JSON(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name", "version", name="uq_ai_models_name_version"),
    )
    op.create_table(
        "currencies",
        sa.Column("code", sa.String(length=3), nullable=False),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.PrimaryKeyConstraint("code"),
    )
    op.create_table(
        "license_types",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("code", sa.String(length=64), nullable=False),
        sa.Column("name", sa.String(length=120), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code"),
    )
    op.create_table(
        "provider_service_areas",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("provider_profile_id", sa.BigInteger(), nullable=False),
        sa.Column("city", sa.String(length=100), nullable=True),
        sa.Column("state", sa.String(length=100), nullable=True),
        sa.Column("country", sa.String(length=100), nullable=False),
        sa.Column("center_lat", sa.Numeric(precision=9, scale=6), nullable=True),
        sa.Column("center_lon", sa.Numeric(precision=9, scale=6), nullable=True),
        sa.Column("radius_km", sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["provider_profile_id"], ["provider_profiles.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_provider_service_areas_city",
        "provider_service_areas",
        ["city"],
        unique=False,
    )
    op.create_index(
        "ix_provider_service_areas_point",
        "provider_service_areas",
        ["center_lat", "center_lon"],
        unique=False,
    )
    op.create_table(
        "request_inferred_licenses",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("request_id", sa.BigInteger(), nullable=False),
        sa.Column("license_type_id", sa.Integer(), nullable=False),
        sa.Column("confidence", sa.Numeric(precision=5, scale=4), nullable=True),
        sa.Column("model_id", sa.BigInteger(), nullable=True),
        sa.Column(
            "predicted_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "validation_status",
            sa.Enum(
                "AUTO",
                "APPROVED",
                "OVERRIDDEN",
                "REJECTED",
                name="request_inferred_license_status",
            ),
            nullable=False,
        ),
        sa.Column("validated_by", sa.BigInteger(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["license_type_id"], ["license_types.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["model_id"], ["ai_models.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["request_id"], ["service_requests.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["validated_by"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "request_id", "license_type_id", name="uq_request_license_inference"
        ),
    )
    op.create_index(
        "ix_inferred_licenses_request",
        "request_inferred_licenses",
        ["request_id"],
        unique=False,
    )
    op.create_table(
        "service_reviews",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("service_id", sa.BigInteger(), nullable=False),
        sa.Column("rater_user_id", sa.BigInteger(), nullable=False),
        sa.Column("ratee_provider_profile_id", sa.BigInteger(), nullable=False),
        sa.Column("rating", sa.SmallInteger(), nullable=False),
        sa.Column("comment", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.CheckConstraint("rating BETWEEN 1 AND 5", name="ck_service_reviews_rating"),
        sa.ForeignKeyConstraint(
            ["ratee_provider_profile_id"], ["provider_profiles.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["rater_user_id"], ["users.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["service_id"], ["services.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("service_id", "rater_user_id", name="uq_service_rater"),
    )
    op.create_index(
        "ix_service_reviews_ratee_rating",
        "service_reviews",
        ["ratee_provider_profile_id", "rating"],
        unique=False,
    )
    op.create_table(
        "service_status_history",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("service_id", sa.BigInteger(), nullable=False),
        sa.Column("from_status", sa.String(length=20), nullable=True),
        sa.Column("to_status", sa.String(length=20), nullable=False),
        sa.Column(
            "changed_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("changed_by", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(["changed_by"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["service_id"], ["services.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_service_status_history_service",
        "service_status_history",
        ["service_id", "changed_at"],
        unique=False,
    )
    op.alter_column(
        "addresses",
        "latitude",
        existing_type=mysql.VARCHAR(length=50),
        type_=sa.Numeric(precision=9, scale=6),
        existing_nullable=True,
    )
    op.alter_column(
        "addresses",
        "longitude",
        existing_type=mysql.VARCHAR(length=50),
        type_=sa.Numeric(precision=9, scale=6),
        existing_nullable=True,
    )
    op.add_column(
        "provider_licenses", sa.Column("license_type_id", sa.Integer(), nullable=False)
    )
    op.alter_column(
        "provider_licenses",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        type_=sa.DateTime(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "provider_licenses",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        type_=sa.DateTime(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.create_unique_constraint(
        "uq_provider_license_unique",
        "provider_licenses",
        ["provider_profile_id", "license_type_id", "license_number"],
    )
    op.create_foreign_key(
        None,
        "provider_licenses",
        "license_types",
        ["license_type_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_column("provider_licenses", "license_type")
    op.alter_column(
        "provider_profiles",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        type_=sa.DateTime(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "provider_profiles",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        type_=sa.DateTime(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.add_column(
        "service_request_matches",
        sa.Column("license_type_id", sa.Integer(), nullable=True),
    )
    op.add_column(
        "service_request_matches",
        sa.Column("score", sa.Numeric(precision=7, scale=4), nullable=False),
    )
    op.add_column(
        "service_request_matches",
        sa.Column("distance_km", sa.Numeric(precision=6, scale=2), nullable=True),
    )
    op.add_column(
        "service_request_matches", sa.Column("features", sa.JSON(), nullable=True)
    )
    op.add_column(
        "service_request_matches", sa.Column("model_id", sa.BigInteger(), nullable=True)
    )
    op.add_column(
        "service_request_matches",
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
    )
    op.create_index(
        "ix_matches_provider_status",
        "service_request_matches",
        ["provider_profile_id", "status"],
        unique=False,
    )
    op.create_index(
        "ix_matches_request_score",
        "service_request_matches",
        ["request_id", "score"],
        unique=False,
    )
    op.create_foreign_key(
        None,
        "service_request_matches",
        "license_types",
        ["license_type_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        None,
        "service_request_matches",
        "ai_models",
        ["model_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.add_column(
        "service_request_proposals",
        sa.Column("version", sa.SmallInteger(), nullable=False),
    )
    op.add_column(
        "service_request_proposals",
        sa.Column("proposed_start_at", sa.DateTime(), nullable=True),
    )
    op.add_column(
        "service_request_proposals",
        sa.Column("proposed_end_at", sa.DateTime(), nullable=True),
    )
    op.alter_column(
        "service_request_proposals",
        "currency",
        existing_type=mysql.VARCHAR(length=10),
        type_=sa.String(length=3),
        existing_nullable=False,
    )
    # Crear Ã­ndices antes de reemplazar la constraint Ãºnica para mantener los Ã­ndices requeridos por los FKs en MySQL
    op.create_index(
        "ix_proposals_provider_status",
        "service_request_proposals",
        ["provider_profile_id", "status"],
        unique=False,
    )
    op.create_index(
        "ix_proposals_req_status",
        "service_request_proposals",
        ["request_id", "status"],
        unique=False,
    )
    op.drop_constraint(
        op.f("uq_request_provider_proposal"),
        "service_request_proposals",
        type_="unique",
    )
    op.create_unique_constraint(
        "uq_request_provider_proposal",
        "service_request_proposals",
        ["request_id", "provider_profile_id", "version"],
    )
    op.create_foreign_key(
        None,
        "service_request_proposals",
        "currencies",
        ["currency"],
        ["code"],
        ondelete="RESTRICT",
    )
    op.drop_column("service_request_proposals", "scheduled_end_date")
    op.drop_column("service_request_proposals", "scheduled_date")
    op.add_column(
        "service_requests",
        sa.Column("city_snapshot", sa.String(length=100), nullable=True),
    )
    op.add_column(
        "service_requests",
        sa.Column("lat_snapshot", sa.Numeric(precision=9, scale=6), nullable=True),
    )
    op.add_column(
        "service_requests",
        sa.Column("lon_snapshot", sa.Numeric(precision=9, scale=6), nullable=True),
    )
    op.create_index(
        "ix_service_requests_city_snapshot",
        "service_requests",
        ["city_snapshot"],
        unique=False,
    )
    op.create_index(
        "ix_service_requests_point",
        "service_requests",
        ["lat_snapshot", "lon_snapshot"],
        unique=False,
    )
    op.create_index(
        "ix_service_requests_type_city",
        "service_requests",
        ["request_type", "city_snapshot", "created_at"],
        unique=False,
    )
    op.create_index(
        "ix_services_client_status", "services", ["client_id", "status"], unique=False
    )
    op.create_index(
        "ix_services_provider_status",
        "services",
        ["provider_profile_id", "status"],
        unique=False,
    )
    op.create_index(
        "ix_services_scheduled_start", "services", ["scheduled_start_at"], unique=False
    )
    op.drop_column("services", "rated_at")
    op.drop_column("services", "review_comment")
    op.drop_column("services", "rating")
    op.alter_column(
        "users",
        "role",
        existing_type=mysql.VARCHAR(length=20),
        type_=sa.Enum("CLIENT", "PROVIDER", "ADMIN", name="user_role"),
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Revertir los cambios de la migraciÃ³n."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "users",
        "role",
        existing_type=sa.Enum("CLIENT", "PROVIDER", "ADMIN", name="user_role"),
        type_=mysql.VARCHAR(length=20),
        existing_nullable=False,
    )
    op.add_column(
        "services",
        sa.Column("rating", mysql.SMALLINT(), autoincrement=False, nullable=True),
    )
    op.add_column("services", sa.Column("review_comment", mysql.TEXT(), nullable=True))
    op.add_column("services", sa.Column("rated_at", mysql.DATETIME(), nullable=True))
    op.drop_index("ix_services_scheduled_start", table_name="services")
    op.drop_index("ix_services_provider_status", table_name="services")
    op.drop_index("ix_services_client_status", table_name="services")
    op.drop_index("ix_service_requests_type_city", table_name="service_requests")
    op.drop_index("ix_service_requests_point", table_name="service_requests")
    op.drop_index("ix_service_requests_city_snapshot", table_name="service_requests")
    op.drop_column("service_requests", "lon_snapshot")
    op.drop_column("service_requests", "lat_snapshot")
    op.drop_column("service_requests", "city_snapshot")
    op.add_column(
        "service_request_proposals",
        sa.Column("scheduled_date", mysql.DATETIME(), nullable=True),
    )
    op.add_column(
        "service_request_proposals",
        sa.Column("scheduled_end_date", mysql.DATETIME(), nullable=True),
    )
    op.drop_constraint(None, "service_request_proposals", type_="foreignkey")
    op.drop_index("ix_proposals_req_status", table_name="service_request_proposals")
    op.drop_index(
        "ix_proposals_provider_status", table_name="service_request_proposals"
    )
    op.drop_constraint(
        "uq_request_provider_proposal", "service_request_proposals", type_="unique"
    )
    op.create_unique_constraint(
        op.f("uq_request_provider_proposal"),
        "service_request_proposals",
        ["request_id", "provider_profile_id"],
    )
    op.alter_column(
        "service_request_proposals",
        "currency",
        existing_type=sa.String(length=3),
        type_=mysql.VARCHAR(length=10),
        existing_nullable=False,
    )
    op.drop_column("service_request_proposals", "proposed_end_at")
    op.drop_column("service_request_proposals", "proposed_start_at")
    op.drop_column("service_request_proposals", "version")
    op.drop_constraint(None, "service_request_matches", type_="foreignkey")
    op.drop_constraint(None, "service_request_matches", type_="foreignkey")
    op.drop_index("ix_matches_request_score", table_name="service_request_matches")
    op.drop_index("ix_matches_provider_status", table_name="service_request_matches")
    op.drop_column("service_request_matches", "created_at")
    op.drop_column("service_request_matches", "model_id")
    op.drop_column("service_request_matches", "features")
    op.drop_column("service_request_matches", "distance_km")
    op.drop_column("service_request_matches", "score")
    op.drop_column("service_request_matches", "license_type_id")
    op.alter_column(
        "provider_profiles",
        "updated_at",
        existing_type=sa.DateTime(),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "provider_profiles",
        "created_at",
        existing_type=sa.DateTime(),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.add_column(
        "provider_licenses",
        sa.Column("license_type", mysql.VARCHAR(length=120), nullable=True),
    )
    op.drop_constraint(None, "provider_licenses", type_="foreignkey")
    op.drop_constraint(
        "uq_provider_license_unique", "provider_licenses", type_="unique"
    )
    op.alter_column(
        "provider_licenses",
        "updated_at",
        existing_type=sa.DateTime(),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "provider_licenses",
        "created_at",
        existing_type=sa.DateTime(),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_column("provider_licenses", "license_type_id")
    op.alter_column(
        "addresses",
        "longitude",
        existing_type=sa.Numeric(precision=9, scale=6),
        type_=mysql.VARCHAR(length=50),
        existing_nullable=True,
    )
    op.alter_column(
        "addresses",
        "latitude",
        existing_type=sa.Numeric(precision=9, scale=6),
        type_=mysql.VARCHAR(length=50),
        existing_nullable=True,
    )
    op.drop_index(
        "ix_service_status_history_service", table_name="service_status_history"
    )
    op.drop_table("service_status_history")
    op.drop_index("ix_service_reviews_ratee_rating", table_name="service_reviews")
    op.drop_table("service_reviews")
    op.drop_index(
        "ix_inferred_licenses_request", table_name="request_inferred_licenses"
    )
    op.drop_table("request_inferred_licenses")
    op.drop_index(
        "ix_provider_service_areas_point", table_name="provider_service_areas"
    )
    op.drop_index("ix_provider_service_areas_city", table_name="provider_service_areas")
    op.drop_table("provider_service_areas")
    op.drop_table("license_types")
    op.drop_table("currencies")
    op.drop_table("ai_models")
    # ### end Alembic commands ###
